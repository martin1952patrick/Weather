{"ast":null,"code":"var _jsxFileName = \"/home/martin/Documents/Martin/RAPID/06_weather-app/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { getWeatherByCityName, getWeatherByCoordinates } from './api/WeatherService';\nimport SearchBox from './components/SearchBox';\nimport Weather from './components/Weather';\nimport { StyledApp } from './styles/App.styled';\nimport Loader from './components/UI/Loader';\nimport { useLoading } from './Hooks/useLoading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const initialState = {\n    coord: {\n      lon: 10.99,\n      lat: 44.34\n    },\n    weather: [{\n      id: 501,\n      main: \"Rain\",\n      description: \"moderate rain\",\n      icon: \"10n\"\n    }],\n    base: \"stations\",\n    main: {\n      temp: 29,\n      feels_like: 30,\n      temp_min: 24,\n      temp_max: 31,\n      pressure: 1015,\n      humidity: 64,\n      sea_level: 1015,\n      grnd_level: 933\n    },\n    visibility: 10000,\n    wind: {\n      speed: 0.62,\n      deg: 349,\n      gust: 1.18\n    },\n    rain: {\n      \"1h\": 3.16\n    },\n    clouds: {\n      all: 100\n    },\n    dt: 1661870592,\n    sys: {\n      type: 2,\n      id: 2075663,\n      country: \"IT\",\n      sunrise: 1661834187,\n      sunset: 1663870592\n    },\n    timezone: 7200,\n    id: 3163858,\n    name: \"Zocca\",\n    cod: 200\n  };\n\n  const _transformWeatherItem = item => {\n    const newWeatherItem = {\n      id: item.id,\n      cityName: item.name,\n      countryName: item.sys.country,\n      time: item.dt,\n      timeRise: _transformDateItem(item.sys.sunrise),\n      timeDown: _transformDateItem(item.sys.sunset),\n      weather: {\n        id: item.weather[0].id,\n        name: item.weather[0].main,\n        description: item.weather[0].description,\n        icon: item.weather[0].icon\n      },\n      main: {\n        temp: Math.round(item.main.temp),\n        tempFeels: Math.round(item.main.feels_like),\n        temp_min: Math.round(item.main.temp_min),\n        temp_max: Math.round(item.main.temp_max),\n        humidity: item.main.humidity,\n        pressure: item.main.pressure\n      },\n      wind: {\n        speed: item.wind.speed\n      }\n    };\n    return newWeatherItem;\n  };\n\n  const _transformDateItem = date => {\n    const options = {\n      hour: 'numeric',\n      minute: 'numeric'\n    };\n    const newDate = new Date(date * 1000);\n    return newDate.toLocaleString('en', options);\n  };\n\n  const [currentWeather, setCurrentWeather] = useState();\n  const [query, setQuery] = useState(\"Chop\");\n  const [city, setCity] = useState();\n  const [getWeather, isLoading, error] = useLoading(async () => {\n    let response = await getWeatherByCityName(query);\n\n    if (response == undefined) {\n      response = await getWeatherByCoordinates(city === null || city === void 0 ? void 0 : city.latitude, city === null || city === void 0 ? void 0 : city.longitude);\n    }\n\n    setCurrentWeather(_transformWeatherItem(response));\n  });\n  useEffect(() => {\n    setCurrentWeather(_transformWeatherItem(initialState));\n    getWeather();\n  }, [query, city]);\n  return /*#__PURE__*/_jsxDEV(StyledApp, {\n    children: [/*#__PURE__*/_jsxDEV(SearchBox, {\n      query: query,\n      setQuery: setQuery,\n      setCity: setCity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Weather, {\n      item: currentWeather,\n      isLoading: isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Loader, {\n      isLoading: isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"8wlGOozGEnam7cxc2LRfrmRlnwk=\", false, function () {\n  return [useLoading];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","getWeatherByCityName","getWeatherByCoordinates","SearchBox","Weather","StyledApp","Loader","useLoading","App","initialState","coord","lon","lat","weather","id","main","description","icon","base","temp","feels_like","temp_min","temp_max","pressure","humidity","sea_level","grnd_level","visibility","wind","speed","deg","gust","rain","clouds","all","dt","sys","type","country","sunrise","sunset","timezone","name","cod","_transformWeatherItem","item","newWeatherItem","cityName","countryName","time","timeRise","_transformDateItem","timeDown","Math","round","tempFeels","date","options","hour","minute","newDate","Date","toLocaleString","currentWeather","setCurrentWeather","query","setQuery","city","setCity","getWeather","isLoading","error","response","undefined","latitude","longitude"],"sources":["/home/martin/Documents/Martin/RAPID/06_weather-app/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { getWeatherByCityName, getWeatherByCoordinates } from './api/WeatherService';\nimport SearchBox from './components/SearchBox';\nimport Weather from './components/Weather';\nimport { StyledApp } from './styles/App.styled';\nimport { IWEatherItem } from './types/weather';\nimport { ICity } from './types/city';\nimport Loader from './components/UI/Loader';\nimport { useLoading } from './Hooks/useLoading';\n\n\nfunction App() {\n\n  const initialState: any = {\n    coord: {\n      lon: 10.99,\n      lat: 44.34\n    },\n    weather: [\n      {\n        id: 501,\n        main: \"Rain\",\n        description: \"moderate rain\",\n        icon: \"10n\"\n      }\n    ],\n    base: \"stations\",\n    main: {\n      temp: 29,\n      feels_like: 30,\n      temp_min: 24,\n      temp_max: 31,\n      pressure: 1015,\n      humidity: 64,\n      sea_level: 1015,\n      grnd_level: 933\n    },\n    visibility: 10000,\n    wind: {\n      speed: 0.62,\n      deg: 349,\n      gust: 1.18\n    },\n    rain: {\n      \"1h\": 3.16\n    },\n    clouds: {\n      all: 100\n    },\n    dt: 1661870592,\n    sys: {\n      type: 2,\n      id: 2075663,\n      country: \"IT\",\n      sunrise: 1661834187,\n      sunset: 1663870592\n    },\n    timezone: 7200,\n    id: 3163858,\n    name: \"Zocca\",\n    cod: 200\n  }\n\n  const _transformWeatherItem = (item: any) => {\n    const newWeatherItem: IWEatherItem =  {\n      id: item.id,\n      cityName: item.name,\n      countryName: item.sys.country,\n      time: item.dt,\n      timeRise: _transformDateItem(item.sys.sunrise),\n      timeDown: _transformDateItem(item.sys.sunset),\n      weather: {\n          id: item.weather[0].id,\n          name: item.weather[0].main,\n          description: item.weather[0].description,\n          icon: item.weather[0].icon\n      },\n      main: {\n          temp: Math.round(item.main.temp),\n          tempFeels: Math.round(item.main.feels_like),\n          temp_min: Math.round(item.main.temp_min),\n          temp_max: Math.round(item.main.temp_max),\n          humidity: item.main.humidity,\n          pressure: item.main.pressure,\n      },\n      wind: {\n          speed: item.wind.speed\n      }\n    }\n    return newWeatherItem\n  }\n  \n  const _transformDateItem = (date: number) => {\n    const options: object = {\n      hour: 'numeric',\n      minute: 'numeric'\n    }\n\n    const newDate = new Date(date * 1000)\n\n    return newDate.toLocaleString('en', options)\n  }\n\n  const [currentWeather, setCurrentWeather] = useState<IWEatherItem>()\n  const [query, setQuery] = useState(\"Chop\")\n  const [city, setCity] = useState<ICity>()\n\n  const [getWeather, isLoading, error] = useLoading(async () => {\n      let response = await getWeatherByCityName(query)\n      if(response == undefined){\n        response = await getWeatherByCoordinates(city?.latitude, city?.longitude)\n      }\n      setCurrentWeather(_transformWeatherItem(response))\n  })\n\n  useEffect( () => {\n\n  setCurrentWeather(_transformWeatherItem(initialState))\n     getWeather() \n  }, [query, city])\n  \n\n  return (\n    <StyledApp>\n      <SearchBox query={query} setQuery={setQuery} setCity={setCity}/>\n      <Weather item={currentWeather} isLoading={isLoading}/>\n      <Loader isLoading={isLoading}/>\n    </StyledApp>    \n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}